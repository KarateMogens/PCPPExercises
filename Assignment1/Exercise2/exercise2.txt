---------- Exercise 2.1 ----------

1. Use Java Intrinsic Locks (i.e., synchronized) to implement a monitor ensuring that the access to the shared resource by reader and writer threads is according to the specification above. You may use the code in the lectures and Chapter 8 of Herlihy as inspiration, but do not feel obliged copy that structure.

- See code: SynchronizedMonitor.java

2. Is your solution fair towards writer threads? In other words, does your solution ensure that if a writer thread wants to write, then it will eventually do so? If so, explain why. If not, modify part 1. so that your implementation satisfies this fairness requirement, and then explain why your new solution satisfies the requirement.

- The solution is not initially fair towards writer threads. Since acquiring a readlock is less restrictive than acquiring a writelock, the program will prioritize readers that will "skip" the writer queue. With an infinite amount of new readers, writers will be unable to acquire a lock.

- The new solution implements to counters related to readlocks; readAcquires and readReleases. These are respectively incremented and decremented on acquires and releases of readslocks. The method writeLock() is modified to have an initial while-loop based on the boolean value (writer). Essentially, this corresponds to the writer queue. When this loop is exited (a writer is picked from the queue) the writer-value is set to true, blocking new readAcquires. There is then a second while-loop that compares the number of readAcquires to the number of readReleases, essentially waiting for all current reads to unlock. Therefore, a writer picked from the write queue is guaranteed to get a lock, when the current readers are done.

- Hypothetically, if an infinite amount writer threads are instantiated, a specific writer thread wt1, is not guaranteed to eventually write.

public void writeLock() {

        synchronized(this) {
            try {
                while (writer) {
                    this.wait();
                }
                writer = true;
                while (readAcquires != readReleases) {
                    this.wait();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            
        }
    }


---------- Exercise 2.2 ----------

Consider the lecture’s example in file TestMutableInteger.java, which contains this def- inition of class MutableInteger.

1. Execute the example as is. Do you observe the "main" thread’s write to mi.value remains invisible to the t thread, so that it loops forever? Independently of your observation, is it possible that the program loops forever? Explain your answer.

- It is possible that the program will loop forever. This is because the value of mi in thread t, is not updated when the value of mi is set to 42 in the thread main, since at runtime these values are stored in the register or low-level caches of each core for performance reasons. In other words, the changes made in the thread main, are not visible to the thread t. To mitigate this, we have to flush the stored value to shared memory, to have the two threads synchronize on the value of mi. 

2. Use Java Intrinsic Locks (synchronized) on the methods of the MutableInteger to ensure that thread t always terminates. Explain why your solution prevents thread t from running forever.

- The above issue can be explained by a missing happens-before relation between the two methods MutableInteger.set() and MutableInteger.get(). We can establish this happens-before relation and thereby forcing each thread to flush data to main memory by adding the keyword synchronized to the two methods.

public synchronized void set(int value) {
		this.value = value;
	}

public synchronized int get() {
		return value;
	}

- Now we have established the happens-before relation [t|main](set) -> [t|main](get) or [t|main](get) -> [t|main](set), which prevents t from running forever, because every call to mi.get() in the while-loop of t, will now have to fetch the value of mi from main-memory, which is synchronized from the thread main.

3. Would thread t always terminate if get() is not defined as synchronized? Explain your answer.

- t is not guaranteed to terminate if MutableInteger.get() is not defined as synchronized, because thread t only uses the get method. Therefore, the operations in t will not guarantee a data-flush and therefore cannot guarantee a subsequent fetch from main memory, where the updated value of MutableInteger is stored.

4. Remove all the locks in the program, and define value in MutableInteger as a volatile variable.
Does thread t always terminate in this case? Explain your answer.

- Yes, t will always terminate if MutableInteger.value is expanded to include the volatile keyword. This is because it ensures that the variable is not stored on the register or low-level caches, where it is unaccessible to other cores. When the set() method is called, volatile ensures that value is flushed to main memory (or shared memory levels). Subsequently, for each call to mi.get() t has to fetch the value from shared memory (where it has been synchronized).


---------- Exercise 2.3 ----------

1. Execute the program several times. Show the results you get. Are there any race conditions?

Results:
 * Sum is 1145624,000000 and should be 2000000,000000
 * Sum is 1399049,000000 and should be 2000000,000000
 * Sum is 1230103,000000 and should be 2000000,000000

- In its initial form, there exists a race condition on the static variable sum.

2. Explain why race conditions appear when t1 and t2 use the Mystery object. Hint: Consider (a) what it means for an instance method to be synchronized, and (b) what it means for a static method to be synchronized.

- The race condition occurs because addInstance() and addStatic() are not using the same lock. addStatic uses the class-lock for Mystery, while addInstance() uses the instance-lock associated with the instance of Mystery, m. Therefore, these two methods are not mutually exclusive in their access to sum, leading to overwrites (and therefore a race condition).

3. Implement a new version of the class Mystery so that the execution of t1 and t2 does not produce race conditions, without changing the modifiers of the field and methods in the Mystery class. That is, you should not make any static field into an instance field (or vice versa), and you should not make any static method into an instance method (or vice versa).

Explain why your new implementation does not have race conditions.

class Mystery {
	
	private static double sum = 0;

	public static void addStatic(double x) {
		synchronized(Mystery.class) {
			sum += x;
		}
	}

	public void addInstance(double x) {
		synchronized(Mystery.class) {
			sum += x;
		}	
	}

	public static double sum() {
		return sum;
	}
}

- Using the instrinsic lock on the class Mystery in both method calls, ensures that each method will use the same lock and is therefore mutually exclusive in their access to sum. This could not be achieved by declaring sum to be volatile, as this does not ensure mutual exclusivity. Another approach could be to create a static field containing a ReentrantLock, used to ensure mutual exclusivity in both methods.

- We could've also just modified addInstance() as shown above and left addStatic() as is, but this is just more readable.

4. Note that the method sum() also uses an intrinsic lock. Is the use of this intrinsic lock on sum() necessary for this program? In other words, would there be race conditions if you remove the modifier synchronized from sum() (assuming that you have fixed the race conditions in 2.3.3)?

- For the specific code in TestLocking0.java, we do not need to synchronize the method sum(), since it is being accessed only after both threads have finished execution.

- However, for the MutableInteger class to be usable in general, we would need to maintain the synchronization on sum() to ensure that the value of sum is not being returned, as it is currently being updated by another thread calling either addInstance() or addStatic(), regardless of having fixed the race condition between addInstance() and addStatic().

